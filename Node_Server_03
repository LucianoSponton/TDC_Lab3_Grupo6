/*
  Rui Santos
  Complete project details at https://RandomNerdTutorials.com/esp8266-nodemcu-client-server-wi-fi/
  
  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files.
  
  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.
*/

// Import required libraries
#include <ESP8266WiFi.h>
#include "ESPAsyncWebServer.h"
#include <ArduinoJson.h>
#include <Time.h>
#include <TimeLib.h>
#include <Wire.h>
// #include <Adafruit_Sensor.h>
// #include <Adafruit_BME280.h>

// Set your access point network credentials
const char* ssid = "ESP8266-Access-Point";
const char* password = "123456789";


/*#include <SPI.h>
#define BME_SCK 18
#define BME_MISO 19
#define BME_MOSI 23
#define BME_CS 5*/

//Adafruit_BME280 bme; // I2C
//Adafruit_BME280 bme(BME_CS); // hardware SPI
//Adafruit_BME280 bme(BME_CS, BME_MOSI, BME_MISO, BME_SCK); // software SPI

// Create AsyncWebServer object on port 80
AsyncWebServer server(80);

// String readTemp() {
//   return String(bme.readTemperature());
//   //return String(1.8 * bme.readTemperature() + 32);
// }

// String readHumi() {
//   return String(bme.readHumidity());
// }
IPAddress IP;
// String readPres() {
//   return String(bme.readPressure() / 100.0F);
// }

void setup(){

  


  // Serial port for debugging purposes
  Serial.begin(115200);
  //Serial.println();
  //String x = GenerateAndSerializeJson(1,2,"R",5);
  // Setting the ESP as an access point
  //Serial.print("Setting AP (Access Point)â€¦");
  // Remove the password parameter, if you want the AP (Access Point) to be open
  WiFi.softAP(ssid, password);

  IP = WiFi.softAPIP();
  //Serial.print("AP IP address: ");
  //Serial.println(IP);
  
  server.on("/temperature", HTTP_GET, [](AsyncWebServerRequest *request)
  { 
    String x = GenerateAndSerializeJson(rand(),rand(),"R",rand());
    request->send_P(200, "text/plain", x.c_str());
  });

  server.on("/humidity", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send_P(200, "text/plain", "5");
  });
  server.on("/pressure", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send_P(200, "text/plain", "6");
  });
  
  bool status;

  // default settings
  // (you can also pass in a Wire library object like &Wire2)
  // status = bme.begin(0x76);  
  // if (!status) {
  //   Serial.println("Could not find a valid BME280 sensor, check wiring!");
  //   while (1);
  // }
  
  // Start server
  server.begin();
}
 
void loop(){
  //Serial.println(IP);
  //Serial.println(WiFi.localIP());
  
  //Serial.print(x);


}

String GenerateAndSerializeJson(int sensor, int buzzer, String RGB, int display)
{ 

  StaticJsonDocument<300> doc;

  char json[1000];

  doc["controller_name"] = "NodeMCU esp8266";
  time_t fecha = now();

  String ahora=String(year(fecha)) + "-" + String(month(fecha)) + "-" + String(day(fecha))+ "T" + String(hour(fecha)) + ":" + String(minute(fecha)) + ":" + String(second(fecha)) + "Z";
  
  //Serial.println(ahora);

  doc["date"] = ahora;

  // Armando el array actuators

  JsonArray arrActuator = doc.createNestedArray("actuators"); 

  StaticJsonDocument<200> act;

  JsonObject actdisplay = act.to<JsonObject>();

  actdisplay["type"]="display";

  actdisplay["current_value"] = display; 

  arrActuator.add(actdisplay);

  JsonObject actledRGB = act.to<JsonObject>();

  actledRGB["type"]="ledRGB";

  actledRGB["current_value"] = RGB; 

  arrActuator.add(actledRGB);

  JsonObject actspeaker = act.to<JsonObject>();

  actspeaker["type"]="speaker";

  actspeaker["current_value"] = buzzer; 

  arrActuator.add(actspeaker);

  JsonArray arrSensor = doc.createNestedArray("sensors"); 
  StaticJsonDocument<300> sen; 

  JsonObject sensors = sen.to<JsonObject>(); 

  sensors["type"]="proximity";

  sensors["current_value"] = sensor; 

  arrSensor.add(sensors);


  serializeJsonPretty(doc, json);

  //Serial.print("Json: ");

  Serial.println(convertToString(json));

  //Wire.write(json, sizeof(json));
  int json_size = sizeof(json) / sizeof(char);

  return convertToString(json);
}

// converts character array
// to string and returns it
// String convertToString(char* a, int size)
// {
//     int i;
//     String s = "";
//     for (i = 0; i < size; i++) {
//         s = s + a[i];
//     }
//     return s;
// }

String convertToString(char* a)
{
    String s(a);
 
    return s;
}
